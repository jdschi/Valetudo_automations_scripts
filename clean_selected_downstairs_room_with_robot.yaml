blueprint:
  name: Valetudo Clean Selected Room Script
  description: Provides a simple UI to clean a room. Will queue up to 12 rooms with multiple calls. 
    Requires the script (or blueprint) `update-roomlist-blueprint.yaml` also be installed and running.
  domain: script
  input:
    topic_prefix:
      name: Topic Prefix
      description: Found in Valetudo UI. Hamburger top left -> Connectivity -> MQTT Connectivity (e.g., valetudo)
      default: valetudo

    identifier:
      name: Identifier
      description: Found in Valetudo UI. Hamburger top left -> Connectivity -> MQTT Connectivity
#      default: l10surobot

    vacuum:
      name: Vacuum robot
      selector:
        entity:
          filter:
            - domain: vacuum
#      default: vacuum.valetudo_l10surobot

    map_segments_sensor:
      name: Robot map segments sensor
      description: > 
        Entity created by Valetudo, can be found in MQTT device (_e.g.,_ "sensor.<topic prefix>_<identifier>_map_segments")
      selector:
        entity:
          filter:
            - domain: sensor
#      default: sensor.valetudo_l10surobot_map_segments

    mode_select:
      name: Robot cleaning mode
      description: > 
        Entity created by Valetudo, can be found in MQTT device 
        (_e.g.,_ "sensor.<topic prefix>_<identifier>_mode")
      selector:
        entity:
          filter:
            - domain: select
#      default: select.valetudo_l10surobot_mode

    fan_select:
      name: Robot fan speed
      description: > 
        Entity created by Valetudo, can be found in MQTT device 
        (_e.g.,_ "sensor.<topic prefix>_<identifier>_fan")
      selector:
        entity:
          filter:
            - domain: select
#      default: select.valetudo_l10surobot_fan

    water_select:
      name: Robot water flowrate
      description: > 
        Entity created by Valetudo, can be found in MQTT device 
        (_e.g.,_ "sensor.<topic prefix>_<identifier>_water")
      selector:
        entity:
          filter:
            - domain: select
#      default: select.valetudo_l10surobot_water

    room_list_input_select:
      name: Valetudo Room list
      description: Dropdown helper you _already_ created for this purpose
      selector:
        entity:
          filter:
            - domain: input_select

sequence:
  - alias: Cancel if unknown or unavailable room was selected
    if:
      - condition: template
        value_template: >-
          {{ room_name=="unavailable" or room_name=="unknown"   }}

          {# Did you know that it is not possible to add comments to scripts and
          automations? No, it's true. So, I might try to sneak a few inside the templates. #}

    then:
      - action: persistent_notification.create
        metadata: {}
        data:
          message: >-
            Cannot choose "unavailable" or "unknown" as room in selected robot
            script.
      - action: notify.telegram
        metadata: {}
        data:
          message: >- 
            Cannot choose "unavailable" or "unknown" as room in selected robot
            script.
      - stop: Stopped because "unavailable" or "unknown" was selected for room name
        response_variable: outcome
            
  - variables:
      _map_segments_sensor: !input map_segments_sensor
      _room_list_input_select: !input room_list_input_select
      _topic_prefix: !input topic_prefix
      _identifier: !input identifier
      _vacuum: !input vacuum
      _dock_status: >-
        {{ _vacuum.replace('vacuum','sensor')~'_dock_status' }}
      _mode_select: !input mode_select
      _fan_select: !input fan_select
      _water_select: !input water_select
      room_number: >-
        {% set attrs = states[_map_segments_sensor].attributes %} 
        {% set ns = namespace(found='0') %}  
        {% for k in attrs if k is string and k.isdigit() %}
          {% if attrs[k] == room_name %}
            {% set ns.found = k %}
          {% endif %}
        {% endfor %} 
        {{ ns.found }}
    alias: Variables found under MQTT Connectivity in Valetudo UI to identify robot
#  - alias: Debug info to telegram
#    action: notify.telegram
#    metadata: {}
#    data:
#      message: |-
#        room name: {{room_name}}
#        mode: {{mode}}
#        fan: {{fan}}
#        water: {{water}}
#        iterations: {{iterations}}
#        robot: {{_identifier}}
#        topic prefix: {{_topic_prefix}}
#        room number: {{room_number}}
#        dock status: {{_dock_status}}
#        robot wait: {{ robot_wait_to_start }}
#        dock wait: {{ dock_wait_to_start }}
#      title: For debugging vacuum blueprint or script
#    enabled: true
  - alias: Cancel if  room is not available in list
    if:
      - condition: template
        value_template: |
          {{ room_number == 0 }}
        enabled: true
    then:
      - action: persistent_notification.create
        metadata: {}
        data:
          message: >-
            Selected  room is not  in robot list. But called
            without an existing room. You called "{{ room_name }}", but the list
            of available rooms is
            {{state_attr(_room_list_input_select,'options')}}
          title: Robot Vacuum called
      - action: telegram_bot.send_message
        metadata: {}
        data:
          title: Vacuum Robot Called
          message: >-
            But called without an existing room. You called "{{ room_name }}",
            but the list of available rooms is
            {{state_attr(_room_list_input_select,'options')}}
          enabled: false
      - stop: Stopped because room name was not in list.
        response_variable: outcome
    enabled: true
  - alias: Check for desired robot and dock states. Wait if necessary
    if:
      - condition: not
        conditions:
        - condition: template
          value_template: >-
            {{ robot_wait_to_start == "any" or
            ( is_state(_vacuum, robot_wait_to_start) and 
            is_state(_dock_status, dock_wait_to_start) ) }}
    then:
      - wait_for_trigger:
        - trigger: template
          value_template: >-
            {{ is_state(_vacuum, robot_wait_to_start) and is_state(_dock_status, dock_wait_to_start) }}
    enabled: true
  - alias: If robot wants to start immediately.
    if:
      - condition: template
        value_template: >-
          {{ robot_wait_to_start == "any" }}
    then:
      - action: vacuum.stop
        metadata: {}
        data: {}
        target:
          entity_id: !input vacuum
    enabled: true


  - alias: Set robot mode
    target:
      entity_id: !input mode_select
    data:
      option: "{{mode}}"
    action: select.select_option
    enabled: true
  - alias: Set fan speed
    target:
      entity_id: !input fan_select
    data:
      option: "{{fan}}"
    action: select.select_option
    enabled: true
  - alias: Set water flowrate
    target:
      entity_id: !input water_select
    data:
      option: "{{water}}"
    action: select.select_option
    enabled: true
  - alias: Send robot to clean selected room
    data:
      topic: "{{ _topic_prefix }}/{{ _identifier }}/MapSegmentationCapability/clean/set"
      payload: "{\"segment_ids\": [\"{{ room_number }}\"], \"iterations\": {{ iterations }}}"
    action: mqtt.publish
    enabled: true
#  - action: telegram_bot.send_message
#    metadata: {}
#    data:
#      message: >-
#        Sending robot to {{ mode }} {{ room }}, and turning on appropriate
#        lights. http://{{
#        state_attr('sensor.'~_topic_prefix~'_'~_identifier~'_wi_fi_configuration','ips')[0]
#        }}
#      disable_notification: true
#    enabled: false
#    alias: >-
#      Send telegram notification that cleaning has started (useful for
#      debugging)
mode: queued
max: 12
fields:
  mode:
    selector:
      state: 
        entity_id: !input mode_select
    name: mode
    required: true
    default: vacuum
  fan:
    selector:
      state: 
        entity_id: !input fan_select
    name: fan
    required: true
    default: medium
  water:
    selector:
      state: 
        entity_id: !input water_select
    name: water
    required: true
    default: medium
  iterations:
    selector:
      number:
        min: 1
        max: 2
    name: iterations
    default: 1
    required: true
  room_name:
    selector:
      state:
        entity_id: !input room_list_input_select
    description: Select room for cleaning (do not choose 'unavailable' or 'unknown').
    name: Room name
    required: true
  robot_wait_to_start:
    selector:
      select:
        options:
          - any
          - returning
          - docked
    default: docked
    name: Wait to start task only when the robot is in this state
    description: Note that `any` means stop whatever it is doing and start this task.
    required: true

  dock_wait_to_start:
    selector:
      select:
        options:
          - idle
          - drying
    default: idle
    required: true
    name: Wait to start task only when the dock is in this state
    description: Relevant only if `docked` is selected above.
